print("****************************** RUN START ******************************");
display component_counts;

display A_die * 1E6;
display P_die;
display core_freq * 1E-9;
display perf * 1E-9;

print("==============================");

display core_freq_max * 1E-9, core_freq * 1E-9, core_freq_min * 1E-9;

display P_max, P_die;

display A_die * 1E6, (bump_pitch**2) * (power_bump_count + mc_bump_count + io_bump_count) * 1E6;

display max_wire, component_counts['mc'] * wires_per_mc;

display l1_capacity * 1E-3, l2_capacity * 1E-6, workset_size * 1E-6, ai_app, arithmetic_intensity;

display core_freq * 1E-9, core_freq_nominal * 1E-9, die_voltage_nominal, die_voltage;

display core_freq_base_max * 1E-9, core_freq_absolute_max * 1E-9, core_freq_max * 1E-9, core_area_multiplier;

display l3_capacity * 1E-6, component_counts['l3'], workset_size * 1E-6, l3_hit_rate_nominal, l3_hit_rate;

display core_freq * 1E-9, IPC, component_counts['core'], compute_throughput * 1E-9;

display l3_bw * 1E-9, component_counts['l3'], mc_bw * 1E-9, component_counts['mc'], l3_hit_rate, 
min(l3_bw * component_counts['l3'] / 1, mc_bw * component_counts['mc'] / (1 - l3_hit_rate)) * 1E-9, system_bw * 1E-9;

display compute_throughput * 1E-9, arithmetic_intensity, system_bw * 1E-9,
min(compute_throughput, arithmetic_intensity * system_bw) * 1E-9, perf * 1E-9;

print("==============================");

print("****************************** RUN   END ******************************");

# ****************************** SAVE TO FILE ******************************

print("****************************** RUN START ******************************") >> out.txt;
display component_counts >> out.txt;

display A_die * 1E6 >> out.txt;
display P_die >> out.txt;
display core_freq * 1E-9 >> out.txt;
display perf * 1E-9 >> out.txt;

print("==============================") >> out.txt;

display core_freq_max * 1E-9, core_freq * 1E-9, core_freq_min * 1E-9 >> out.txt;

display P_max, P_die >> out.txt;

display A_die * 1E6, (bump_pitch**2) * (power_bump_count + mc_bump_count + io_bump_count) * 1E6 >> out.txt;

display max_wire, component_counts['mc'] * wires_per_mc >> out.txt;

display l1_capacity * 1E-3, l2_capacity * 1E-6, workset_size * 1E-6, ai_app, arithmetic_intensity >> out.txt;

display core_freq * 1E-9, core_freq_nominal * 1E-9, die_voltage_nominal, die_voltage >> out.txt;

display core_freq_base_max * 1E-9, core_freq_absolute_max * 1E-9, core_freq_max * 1E-9, core_area_multiplier >> out.txt;

display l3_capacity * 1E-6, component_counts['l3'], workset_size * 1E-6, l3_hit_rate_nominal, l3_hit_rate >> out.txt;

display core_freq * 1E-9, IPC, component_counts['core'], compute_throughput * 1E-9 >> out.txt;

display l3_bw * 1E-9, component_counts['l3'], mc_bw * 1E-9, component_counts['mc'], l3_hit_rate, 
min(l3_bw * component_counts['l3'] / 1, mc_bw * component_counts['mc'] / (1 - l3_hit_rate)) * 1E-9, system_bw * 1E-9 >> out.txt;

display compute_throughput * 1E-9, arithmetic_intensity, system_bw * 1E-9,
min(compute_throughput, arithmetic_intensity * system_bw) * 1E-9, perf * 1E-9 >> out.txt;

print("==============================") >> out.txt;

print("****************************** RUN   END ******************************") >> out.txt;
